package com.bulut.attendance.domain;

import static com.bulut.attendance.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class RecordStatusAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecordStatusAllPropertiesEquals(RecordStatus expected, RecordStatus actual) {
        assertRecordStatusAutoGeneratedPropertiesEquals(expected, actual);
        assertRecordStatusAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecordStatusAllUpdatablePropertiesEquals(RecordStatus expected, RecordStatus actual) {
        assertRecordStatusUpdatableFieldsEquals(expected, actual);
        assertRecordStatusUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecordStatusAutoGeneratedPropertiesEquals(RecordStatus expected, RecordStatus actual) {
        assertThat(expected)
            .as("Verify RecordStatus auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecordStatusUpdatableFieldsEquals(RecordStatus expected, RecordStatus actual) {
        assertThat(expected)
            .as("Verify RecordStatus relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getFromDateTime())
                        .as("check fromDateTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getFromDateTime())
            )
            .satisfies(
                e ->
                    assertThat(e.getToDateTime())
                        .as("check toDateTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getToDateTime())
            )
            .satisfies(e -> assertThat(e.getIsDeleted()).as("check isDeleted").isEqualTo(actual.getIsDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRecordStatusUpdatableRelationshipsEquals(RecordStatus expected, RecordStatus actual) {}
}

package com.bulut.attendance.domain;

import static com.bulut.attendance.domain.AssertUtils.bigDecimalCompareTo;
import static com.bulut.attendance.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class TransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAllPropertiesEquals(Transaction expected, Transaction actual) {
        assertTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAllUpdatablePropertiesEquals(Transaction expected, Transaction actual) {
        assertTransactionUpdatableFieldsEquals(expected, actual);
        assertTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAutoGeneratedPropertiesEquals(Transaction expected, Transaction actual) {
        assertThat(expected)
            .as("Verify Transaction auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionUpdatableFieldsEquals(Transaction expected, Transaction actual) {
        assertThat(expected)
            .as("Verify Transaction relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getIssueDateTime())
                        .as("check issueDateTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getIssueDateTime())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalAmount())
                        .as("check totalAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotalAmount())
            )
            .satisfies(e -> assertThat(e.getDesc()).as("check desc").isEqualTo(actual.getDesc()))
            .satisfies(e -> assertThat(e.getDocNumber()).as("check docNumber").isEqualTo(actual.getDocNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionUpdatableRelationshipsEquals(Transaction expected, Transaction actual) {
        assertThat(expected)
            .as("Verify Transaction relationships")
            .satisfies(e -> assertThat(e.getInternalUser()).as("check internalUser").isEqualTo(actual.getInternalUser()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }
}

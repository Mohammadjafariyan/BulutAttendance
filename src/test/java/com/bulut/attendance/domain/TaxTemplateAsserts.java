package com.bulut.attendance.domain;

import static com.bulut.attendance.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TaxTemplateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxTemplateAllPropertiesEquals(TaxTemplate expected, TaxTemplate actual) {
        assertTaxTemplateAutoGeneratedPropertiesEquals(expected, actual);
        assertTaxTemplateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxTemplateAllUpdatablePropertiesEquals(TaxTemplate expected, TaxTemplate actual) {
        assertTaxTemplateUpdatableFieldsEquals(expected, actual);
        assertTaxTemplateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxTemplateAutoGeneratedPropertiesEquals(TaxTemplate expected, TaxTemplate actual) {
        assertThat(expected)
            .as("Verify TaxTemplate auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxTemplateUpdatableFieldsEquals(TaxTemplate expected, TaxTemplate actual) {
        assertThat(expected)
            .as("Verify TaxTemplate relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getRangeFrom()).as("check rangeFrom").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getRangeFrom())
            )
            .satisfies(
                e -> assertThat(e.getRangeTo()).as("check rangeTo").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getRangeTo())
            )
            .satisfies(e -> assertThat(e.getPercent()).as("check percent").isEqualTo(actual.getPercent()))
            .satisfies(e -> assertThat(e.getYear()).as("check year").isEqualTo(actual.getYear()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxTemplateUpdatableRelationshipsEquals(TaxTemplate expected, TaxTemplate actual) {
        assertThat(expected)
            .as("Verify TaxTemplate relationships")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getInternalUser()).as("check internalUser").isEqualTo(actual.getInternalUser()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }
}

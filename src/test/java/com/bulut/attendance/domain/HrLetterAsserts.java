package com.bulut.attendance.domain;

import static com.bulut.attendance.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class HrLetterAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHrLetterAllPropertiesEquals(HrLetter expected, HrLetter actual) {
        assertHrLetterAutoGeneratedPropertiesEquals(expected, actual);
        assertHrLetterAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHrLetterAllUpdatablePropertiesEquals(HrLetter expected, HrLetter actual) {
        assertHrLetterUpdatableFieldsEquals(expected, actual);
        assertHrLetterUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHrLetterAutoGeneratedPropertiesEquals(HrLetter expected, HrLetter actual) {
        assertThat(expected)
            .as("Verify HrLetter auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHrLetterUpdatableFieldsEquals(HrLetter expected, HrLetter actual) {
        assertThat(expected)
            .as("Verify HrLetter relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getUniqueNumber()).as("check uniqueNumber").isEqualTo(actual.getUniqueNumber()))
            .satisfies(
                e ->
                    assertThat(e.getIssueDate())
                        .as("check issueDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getIssueDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getExecutionDate())
                        .as("check executionDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getExecutionDate())
            )
            .satisfies(e -> assertThat(e.getBpmsApproveStatus()).as("check bpmsApproveStatus").isEqualTo(actual.getBpmsApproveStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHrLetterUpdatableRelationshipsEquals(HrLetter expected, HrLetter actual) {
        assertThat(expected)
            .as("Verify HrLetter relationships")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getPersonnelId()).as("check personnelId").isEqualTo(actual.getPersonnelId()))
            .satisfies(e -> assertThat(e.getOrgPosition()).as("check orgPosition").isEqualTo(actual.getOrgPosition()))
            .satisfies(e -> assertThat(e.getOrgUnit()).as("check orgUnit").isEqualTo(actual.getOrgUnit()))
            .satisfies(e -> assertThat(e.getPersonnelStatus()).as("check personnelStatus").isEqualTo(actual.getPersonnelStatus()))
            .satisfies(e -> assertThat(e.getHrLetterParameter()).as("check hrLetterParameter").isEqualTo(actual.getHrLetterParameter()))
            .satisfies(e -> assertThat(e.getInternalUser()).as("check internalUser").isEqualTo(actual.getInternalUser()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }
}

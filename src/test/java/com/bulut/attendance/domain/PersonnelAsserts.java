package com.bulut.attendance.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PersonnelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonnelAllPropertiesEquals(Personnel expected, Personnel actual) {
        assertPersonnelAutoGeneratedPropertiesEquals(expected, actual);
        assertPersonnelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonnelAllUpdatablePropertiesEquals(Personnel expected, Personnel actual) {
        assertPersonnelUpdatableFieldsEquals(expected, actual);
        assertPersonnelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonnelAutoGeneratedPropertiesEquals(Personnel expected, Personnel actual) {
        assertThat(expected)
            .as("Verify Personnel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonnelUpdatableFieldsEquals(Personnel expected, Personnel actual) {
        assertThat(expected)
            .as("Verify Personnel relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getRequitmentDate()).as("check requitmentDate").isEqualTo(actual.getRequitmentDate()))
            .satisfies(e -> assertThat(e.getFather()).as("check father").isEqualTo(actual.getFather()))
            .satisfies(e -> assertThat(e.getShenasname()).as("check shenasname").isEqualTo(actual.getShenasname()))
            .satisfies(e -> assertThat(e.getMahalesodur()).as("check mahalesodur").isEqualTo(actual.getMahalesodur()))
            .satisfies(e -> assertThat(e.getBirthday()).as("check birthday").isEqualTo(actual.getBirthday()))
            .satisfies(e -> assertThat(e.getIsSingle()).as("check isSingle").isEqualTo(actual.getIsSingle()))
            .satisfies(e -> assertThat(e.getLastEducation()).as("check lastEducation").isEqualTo(actual.getLastEducation()))
            .satisfies(e -> assertThat(e.getEducationField()).as("check educationField").isEqualTo(actual.getEducationField()))
            .satisfies(e -> assertThat(e.getChildren()).as("check children").isEqualTo(actual.getChildren()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonnelUpdatableRelationshipsEquals(Personnel expected, Personnel actual) {
        assertThat(expected)
            .as("Verify Personnel relationships")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getInternalUser()).as("check internalUser").isEqualTo(actual.getInternalUser()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }
}

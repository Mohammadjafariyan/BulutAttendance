package com.bulut.attendance.domain;

import static com.bulut.attendance.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class LeaveAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveAllPropertiesEquals(Leave expected, Leave actual) {
        assertLeaveAutoGeneratedPropertiesEquals(expected, actual);
        assertLeaveAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveAllUpdatablePropertiesEquals(Leave expected, Leave actual) {
        assertLeaveUpdatableFieldsEquals(expected, actual);
        assertLeaveUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveAutoGeneratedPropertiesEquals(Leave expected, Leave actual) {
        assertThat(expected)
            .as("Verify Leave auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveUpdatableFieldsEquals(Leave expected, Leave actual) {
        assertThat(expected)
            .as("Verify Leave relevant properties")
            .satisfies(
                e -> assertThat(e.getStart()).as("check start").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getStart())
            )
            .satisfies(e -> assertThat(e.getEnd()).as("check end").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getEnd()))
            .satisfies(e -> assertThat(e.getBpmsApproveStatus()).as("check bpmsApproveStatus").isEqualTo(actual.getBpmsApproveStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveUpdatableRelationshipsEquals(Leave expected, Leave actual) {
        assertThat(expected)
            .as("Verify Leave relationships")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getPersonnelId()).as("check personnelId").isEqualTo(actual.getPersonnelId()))
            .satisfies(e -> assertThat(e.getInternalUser()).as("check internalUser").isEqualTo(actual.getInternalUser()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }
}

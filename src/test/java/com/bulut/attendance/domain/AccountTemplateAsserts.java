package com.bulut.attendance.domain;

import static com.bulut.attendance.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AccountTemplateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountTemplateAllPropertiesEquals(AccountTemplate expected, AccountTemplate actual) {
        assertAccountTemplateAutoGeneratedPropertiesEquals(expected, actual);
        assertAccountTemplateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountTemplateAllUpdatablePropertiesEquals(AccountTemplate expected, AccountTemplate actual) {
        assertAccountTemplateUpdatableFieldsEquals(expected, actual);
        assertAccountTemplateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountTemplateAutoGeneratedPropertiesEquals(AccountTemplate expected, AccountTemplate actual) {
        assertThat(expected)
            .as("Verify AccountTemplate auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountTemplateUpdatableFieldsEquals(AccountTemplate expected, AccountTemplate actual) {
        assertThat(expected)
            .as("Verify AccountTemplate relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getLevel()).as("check level").isEqualTo(actual.getLevel()))
            .satisfies(e -> assertThat(e.getLevelTitle()).as("check levelTitle").isEqualTo(actual.getLevelTitle()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getLevelInTree()).as("check levelInTree").isEqualTo(actual.getLevelInTree()))
            .satisfies(
                e ->
                    assertThat(e.getDebitAmount())
                        .as("check debitAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDebitAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getCreditAmount())
                        .as("check creditAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCreditAmount())
            )
            .satisfies(e -> assertThat(e.getTypeInFormula()).as("check typeInFormula").isEqualTo(actual.getTypeInFormula()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountTemplateUpdatableRelationshipsEquals(AccountTemplate expected, AccountTemplate actual) {
        assertThat(expected)
            .as("Verify AccountTemplate relationships")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getInternalUser()).as("check internalUser").isEqualTo(actual.getInternalUser()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()));
    }
}

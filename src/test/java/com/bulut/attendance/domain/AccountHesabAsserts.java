package com.bulut.attendance.domain;

import static com.bulut.attendance.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AccountHesabAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountHesabAllPropertiesEquals(AccountHesab expected, AccountHesab actual) {
        assertAccountHesabAutoGeneratedPropertiesEquals(expected, actual);
        assertAccountHesabAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountHesabAllUpdatablePropertiesEquals(AccountHesab expected, AccountHesab actual) {
        assertAccountHesabUpdatableFieldsEquals(expected, actual);
        assertAccountHesabUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountHesabAutoGeneratedPropertiesEquals(AccountHesab expected, AccountHesab actual) {
        assertThat(expected)
            .as("Verify AccountHesab auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountHesabUpdatableFieldsEquals(AccountHesab expected, AccountHesab actual) {
        assertThat(expected)
            .as("Verify AccountHesab relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getLevel()).as("check level").isEqualTo(actual.getLevel()))
            .satisfies(e -> assertThat(e.getLevelTitle()).as("check levelTitle").isEqualTo(actual.getLevelTitle()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getLevelInTree()).as("check levelInTree").isEqualTo(actual.getLevelInTree()))
            .satisfies(
                e ->
                    assertThat(e.getDebitAmount())
                        .as("check debitAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getDebitAmount())
            )
            .satisfies(
                e ->
                    assertThat(e.getCreditAmount())
                        .as("check creditAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCreditAmount())
            )
            .satisfies(e -> assertThat(e.getTypeInFormula()).as("check typeInFormula").isEqualTo(actual.getTypeInFormula()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountHesabUpdatableRelationshipsEquals(AccountHesab expected, AccountHesab actual) {
        assertThat(expected)
            .as("Verify AccountHesab relationships")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getInternalUser()).as("check internalUser").isEqualTo(actual.getInternalUser()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getParentAccountId()).as("check parentAccountId").isEqualTo(actual.getParentAccountId()))
            .satisfies(e -> assertThat(e.getPersonnelId()).as("check personnelId").isEqualTo(actual.getPersonnelId()))
            .satisfies(e -> assertThat(e.getBank()).as("check bank").isEqualTo(actual.getBank()));
    }
}

package com.bulut.attendance.domain;

import static com.bulut.attendance.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AccountingProcedureExecutionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountingProcedureExecutionAllPropertiesEquals(
        AccountingProcedureExecution expected,
        AccountingProcedureExecution actual
    ) {
        assertAccountingProcedureExecutionAutoGeneratedPropertiesEquals(expected, actual);
        assertAccountingProcedureExecutionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountingProcedureExecutionAllUpdatablePropertiesEquals(
        AccountingProcedureExecution expected,
        AccountingProcedureExecution actual
    ) {
        assertAccountingProcedureExecutionUpdatableFieldsEquals(expected, actual);
        assertAccountingProcedureExecutionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountingProcedureExecutionAutoGeneratedPropertiesEquals(
        AccountingProcedureExecution expected,
        AccountingProcedureExecution actual
    ) {
        assertThat(expected)
            .as("Verify AccountingProcedureExecution auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountingProcedureExecutionUpdatableFieldsEquals(
        AccountingProcedureExecution expected,
        AccountingProcedureExecution actual
    ) {
        assertThat(expected)
            .as("Verify AccountingProcedureExecution relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getDateTime())
                        .as("check dateTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getDateTime())
            )
            .satisfies(e -> assertThat(e.getDesc()).as("check desc").isEqualTo(actual.getDesc()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccountingProcedureExecutionUpdatableRelationshipsEquals(
        AccountingProcedureExecution expected,
        AccountingProcedureExecution actual
    ) {
        assertThat(expected)
            .as("Verify AccountingProcedureExecution relationships")
            .satisfies(e -> assertThat(e.getInternalUser()).as("check internalUser").isEqualTo(actual.getInternalUser()))
            .satisfies(e -> assertThat(e.getCompany()).as("check company").isEqualTo(actual.getCompany()))
            .satisfies(e -> assertThat(e.getProcedure()).as("check procedure").isEqualTo(actual.getProcedure()));
    }
}
